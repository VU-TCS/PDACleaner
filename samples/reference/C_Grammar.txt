Unreachable transitions:
U_1 = {
}

Non-terminating transitions:
U_2 = {
	(1, " unary_operator ", "", 1, " '~' ")
}

Cleaned PDA:
C_Grammar = {
	Q = { 2 0 1 },
	Gamma = { '&&' logical_and_expression '&' ',' type_specifier '->' 'double' enum_specifier argument_expression_list postfix_expression '--' unary_operator 'struct' inclusive_or_expression ']' 'long' '>>' logical_or_expression '^' equality_expression declaration_specifiers '[' expression 'I' '*=' 'C' type_name '*' '>=' '(' '<<' additive_expression 'goto' cast_expression '!=' specifier_qualifier_list selection_statement '||' '=' '-' shift_expression and_expression 'const' direct_declarator '+=' '++' 'return' 'union' '\"\"' parameter_declaration parameter_list ':' '.' '|=' 'else' iteration_statement 'typedef' '>>=' 'extern' declarator abstract_declarator '+' # '&=' 'register' ')' '%=' 'short' 'T' struct_declaration_list struct_declarator 'for' '{' parameter_type_list '^=' 'if' multiplicative_expression 'void' struct_or_union_specifier '/=' '%' '>' 'unsigned' conditional_expression 'static' 'sizeof' '...' statement_list external_declaration 'char' 'break' '<<=' relational_expression 'case' constant_expression declaration_list 'int' initializer '|' init_declarator storage_class_specifier 'float' declaration assignment_expression '-=' statement type_qualifier init_declarator_list compound_statement assignment_operator type_qualifier_list 'while' translation_unit 'enum' ';' '?' 'do' '/' '~' struct_declarator_list '<' '<=' struct_declaration jump_statement 'signed' labeled_statement 'continue' primary_expression expression_statement 'default' '==' enumerator '!' struct_or_union 'auto' enumerator_list exclusive_or_expression direct_abstract_declarator '}' 'switch' function_definition 'volatile' unary_expression pointer initializer_list identifier_list },
	Delta = {
		(1, " type_specifier ", "", 1, " 'unsigned' ")
		(1, " type_specifier ", "", 1, " 'signed' ")
		(1, " type_specifier ", "", 1, " 'double' ")
		(1, " type_specifier ", "", 1, " 'float' ")
		(1, " type_specifier ", "", 1, " 'long' ")
		(1, " type_specifier ", "", 1, " 'int' ")
		(1, " equality_expression ", "", 1, " relational_expression ")
		(1, " relational_expression ", "", 1, " relational_expression  '>='  shift_expression ")
		(1, " relational_expression ", "", 1, " relational_expression  '<='  shift_expression ")
		(1, " relational_expression ", "", 1, " relational_expression  '>'  shift_expression ")
		(1, " relational_expression ", "", 1, " relational_expression  '<'  shift_expression ")
		(1, " relational_expression ", "", 1, " shift_expression ")
		(1, " shift_expression ", "", 1, " shift_expression  '>>'  additive_expression ")
		(1, " shift_expression ", "", 1, " shift_expression  '<<'  additive_expression ")
		(1, " shift_expression ", "", 1, " additive_expression ")
		(1, " additive_expression ", "", 1, " additive_expression  '-'  multiplicative_expression ")
		(1, " additive_expression ", "", 1, " additive_expression  '+'  multiplicative_expression ")
		(1, " additive_expression ", "", 1, " multiplicative_expression ")
		(1, " multiplicative_expression ", "", 1, " multiplicative_expression  '%'  cast_expression ")
		(1, " multiplicative_expression ", "", 1, " multiplicative_expression  '/'  cast_expression ")
		(1, " multiplicative_expression ", "", 1, " multiplicative_expression  '*'  cast_expression ")
		(1, " multiplicative_expression ", "", 1, " cast_expression ")
		(1, " cast_expression ", "", 1, " '('  type_name  ')'  cast_expression ")
		(1, " cast_expression ", "", 1, " unary_expression ")
		(1, " unary_operator ", "", 1, " '!' ")
		(1, " unary_operator ", "", 1, " '-' ")
		(1, " unary_operator ", "", 1, " '+' ")
		(1, " unary_operator ", "", 1, " '*' ")
		(1, " unary_operator ", "", 1, " '&' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '('  argument_expression_list  ')' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '('  ')' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '['  expression  ']' ")
		(1, " postfix_expression ", "", 1, " primary_expression ")
		(1, " primary_expression ", "", 1, " '('  expression  ')' ")
		(1, " primary_expression ", "", 1, " '\"\"' ")
		(0, "", "", 1, " translation_unit  # ")
		(1, " # ", "", 2, "")
		(1, " primary_expression ", "", 1, " 'I' ")
		(1, " primary_expression ", "", 1, " 'C' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '.'  'I' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '->'  'I' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '++' ")
		(1, " postfix_expression ", "", 1, " postfix_expression  '--' ")
		(1, " argument_expression_list ", "", 1, " assignment_expression ")
		(1, " argument_expression_list ", "", 1, " argument_expression_list  ','  assignment_expression ")
		(1, " unary_expression ", "", 1, " postfix_expression ")
		(1, " unary_expression ", "", 1, " '++'  unary_expression ")
		(1, " unary_expression ", "", 1, " '--'  unary_expression ")
		(1, " unary_expression ", "", 1, " unary_operator  cast_expression ")
		(1, " unary_expression ", "", 1, " 'sizeof'  unary_expression ")
		(1, " unary_expression ", "", 1, " 'sizeof'  '('  type_name  ')' ")
		(1, " equality_expression ", "", 1, " equality_expression  '=='  relational_expression ")
		(1, " equality_expression ", "", 1, " equality_expression  '!='  relational_expression ")
		(1, " and_expression ", "", 1, " equality_expression ")
		(1, " and_expression ", "", 1, " and_expression  '&'  equality_expression ")
		(1, " exclusive_or_expression ", "", 1, " and_expression ")
		(1, " exclusive_or_expression ", "", 1, " exclusive_or_expression  '^'  and_expression ")
		(1, " inclusive_or_expression ", "", 1, " exclusive_or_expression ")
		(1, " inclusive_or_expression ", "", 1, " inclusive_or_expression  '|'  exclusive_or_expression ")
		(1, " logical_and_expression ", "", 1, " inclusive_or_expression ")
		(1, " logical_and_expression ", "", 1, " logical_and_expression  '&&'  inclusive_or_expression ")
		(1, " logical_or_expression ", "", 1, " logical_and_expression ")
		(1, " logical_or_expression ", "", 1, " logical_or_expression  '||'  logical_and_expression ")
		(1, " conditional_expression ", "", 1, " logical_or_expression ")
		(1, " conditional_expression ", "", 1, " logical_or_expression  '?'  expression  ':'  conditional_expression ")
		(1, " assignment_expression ", "", 1, " conditional_expression ")
		(1, " assignment_expression ", "", 1, " unary_expression  assignment_operator  assignment_expression ")
		(1, " assignment_operator ", "", 1, " '=' ")
		(1, " assignment_operator ", "", 1, " '*=' ")
		(1, " assignment_operator ", "", 1, " '/=' ")
		(1, " assignment_operator ", "", 1, " '%=' ")
		(1, " assignment_operator ", "", 1, " '+=' ")
		(1, " assignment_operator ", "", 1, " '-=' ")
		(1, " assignment_operator ", "", 1, " '<<=' ")
		(1, " assignment_operator ", "", 1, " '>>=' ")
		(1, " assignment_operator ", "", 1, " '&=' ")
		(1, " assignment_operator ", "", 1, " '^=' ")
		(1, " assignment_operator ", "", 1, " '|=' ")
		(1, " expression ", "", 1, " assignment_expression ")
		(1, " expression ", "", 1, " expression  ','  assignment_expression ")
		(1, " constant_expression ", "", 1, " conditional_expression ")
		(1, " declaration ", "", 1, " declaration_specifiers  ';' ")
		(1, " declaration ", "", 1, " declaration_specifiers  init_declarator_list  ';' ")
		(1, " declaration_specifiers ", "", 1, " storage_class_specifier ")
		(1, " declaration_specifiers ", "", 1, " storage_class_specifier  declaration_specifiers ")
		(1, " declaration_specifiers ", "", 1, " type_specifier ")
		(1, " declaration_specifiers ", "", 1, " type_specifier  declaration_specifiers ")
		(1, " declaration_specifiers ", "", 1, " type_qualifier ")
		(1, " declaration_specifiers ", "", 1, " type_qualifier  declaration_specifiers ")
		(1, " init_declarator_list ", "", 1, " init_declarator ")
		(1, " init_declarator_list ", "", 1, " init_declarator_list  ','  init_declarator ")
		(1, " init_declarator ", "", 1, " declarator ")
		(1, " init_declarator ", "", 1, " declarator  '='  initializer ")
		(1, " storage_class_specifier ", "", 1, " 'typedef' ")
		(1, " storage_class_specifier ", "", 1, " 'extern' ")
		(1, " type_specifier ", "", 1, " struct_or_union_specifier ")
		(1, " type_specifier ", "", 1, " enum_specifier ")
		(1, " type_specifier ", "", 1, " 'T' ")
		(1, " struct_or_union_specifier ", "", 1, " struct_or_union  'I'  '{'  struct_declaration_list  '}' ")
		(1, " struct_or_union_specifier ", "", 1, " struct_or_union  '{'  struct_declaration_list  '}' ")
		(1, " struct_or_union_specifier ", "", 1, " struct_or_union  'I' ")
		(1, " struct_or_union ", "", 1, " 'struct' ")
		(1, " struct_or_union ", "", 1, " 'union' ")
		(1, " struct_declaration_list ", "", 1, " struct_declaration ")
		(1, " struct_declaration_list ", "", 1, " struct_declaration_list  struct_declaration ")
		(1, " struct_declaration ", "", 1, " specifier_qualifier_list  struct_declarator_list  ';' ")
		(1, " specifier_qualifier_list ", "", 1, " type_specifier  specifier_qualifier_list ")
		(1, " specifier_qualifier_list ", "", 1, " type_specifier ")
		(1, " specifier_qualifier_list ", "", 1, " type_qualifier  specifier_qualifier_list ")
		(1, " specifier_qualifier_list ", "", 1, " type_qualifier ")
		(1, " struct_declarator_list ", "", 1, " struct_declarator ")
		(1, " struct_declarator_list ", "", 1, " struct_declarator_list  ','  struct_declarator ")
		(1, " struct_declarator ", "", 1, " declarator ")
		(1, " struct_declarator ", "", 1, " ':'  constant_expression ")
		(1, " struct_declarator ", "", 1, " declarator  ':'  constant_expression ")
		(1, " enum_specifier ", "", 1, " 'enum'  '{'  enumerator_list  '}' ")
		(1, " enum_specifier ", "", 1, " 'enum'  'I'  '{'  enumerator_list  '}' ")
		(1, " enum_specifier ", "", 1, " 'enum'  'I' ")
		(1, " enumerator_list ", "", 1, " enumerator ")
		(1, " enumerator_list ", "", 1, " enumerator_list  ','  enumerator ")
		(1, " enumerator ", "", 1, " 'I' ")
		(1, " enumerator ", "", 1, " 'I'  '='  constant_expression ")
		(1, " type_qualifier ", "", 1, " 'const' ")
		(1, " type_qualifier ", "", 1, " 'volatile' ")
		(1, " declarator ", "", 1, " pointer  direct_declarator ")
		(1, " declarator ", "", 1, " direct_declarator ")
		(1, " direct_declarator ", "", 1, " 'I' ")
		(1, " direct_declarator ", "", 1, " '('  declarator  ')' ")
		(1, " direct_declarator ", "", 1, " direct_declarator  '['  constant_expression  ']' ")
		(1, " direct_declarator ", "", 1, " direct_declarator  '['  ']' ")
		(1, " direct_declarator ", "", 1, " direct_declarator  '('  parameter_type_list  ')' ")
		(1, " direct_declarator ", "", 1, " direct_declarator  '('  identifier_list  ')' ")
		(1, " direct_declarator ", "", 1, " direct_declarator  '('  ')' ")
		(1, " pointer ", "", 1, " '*' ")
		(1, " pointer ", "", 1, " '*'  type_qualifier_list ")
		(1, " pointer ", "", 1, " '*'  pointer ")
		(1, " pointer ", "", 1, " '*'  type_qualifier_list  pointer ")
		(1, " type_qualifier_list ", "", 1, " type_qualifier ")
		(1, " type_qualifier_list ", "", 1, " type_qualifier_list  type_qualifier ")
		(1, " parameter_type_list ", "", 1, " parameter_list ")
		(1, " parameter_type_list ", "", 1, " parameter_list  ','  '...' ")
		(1, " parameter_list ", "", 1, " parameter_declaration ")
		(1, " parameter_list ", "", 1, " parameter_list  ','  parameter_declaration ")
		(1, " parameter_declaration ", "", 1, " declaration_specifiers  declarator ")
		(1, " parameter_declaration ", "", 1, " declaration_specifiers  abstract_declarator ")
		(1, " statement ", "", 1, " expression_statement ")
		(1, " statement ", "", 1, " selection_statement ")
		(1, " statement ", "", 1, " iteration_statement ")
		(1, " statement ", "", 1, " jump_statement ")
		(1, " labeled_statement ", "", 1, " 'I'  ':'  statement ")
		(1, " labeled_statement ", "", 1, " 'case'  constant_expression  ':'  statement ")
		(1, " labeled_statement ", "", 1, " 'default'  ':'  statement ")
		(1, " compound_statement ", "", 1, " '{'  '}' ")
		(1, " compound_statement ", "", 1, " '{'  statement_list  '}' ")
		(1, " compound_statement ", "", 1, " '{'  declaration_list  '}' ")
		(1, " compound_statement ", "", 1, " '{'  declaration_list  statement_list  '}' ")
		(1, " declaration_list ", "", 1, " declaration ")
		(1, " selection_statement ", "", 1, " 'if'  '('  expression  ')'  statement  'else'  statement ")
		(1, " selection_statement ", "", 1, " 'switch'  '('  expression  ')'  statement ")
		(1, " iteration_statement ", "", 1, " 'while'  '('  expression  ')'  statement ")
		(1, " iteration_statement ", "", 1, " 'do'  statement  'while'  '('  expression  ')'  ';' ")
		(1, " selection_statement ", "", 1, " 'if'  '('  expression  ')'  statement ")
		(1, " expression_statement ", "", 1, " expression  ';' ")
		(1, " expression_statement ", "", 1, " ';' ")
		(1, " statement_list ", "", 1, " statement_list  statement ")
		(1, " statement_list ", "", 1, " statement ")
		(1, " declaration_list ", "", 1, " declaration_list  declaration ")
		(1, " statement ", "", 1, " compound_statement ")
		(1, " statement ", "", 1, " labeled_statement ")
		(1, " initializer_list ", "", 1, " initializer_list  ','  initializer ")
		(1, " initializer_list ", "", 1, " initializer ")
		(1, " initializer ", "", 1, " '{'  initializer_list  ','  '}' ")
		(1, " initializer ", "", 1, " '{'  initializer_list  '}' ")
		(1, " initializer ", "", 1, " assignment_expression ")
		(1, " direct_abstract_declarator ", "", 1, " direct_abstract_declarator  '('  parameter_type_list  ')' ")
		(1, " direct_abstract_declarator ", "", 1, " direct_abstract_declarator  '('  ')' ")
		(1, " direct_abstract_declarator ", "", 1, " '('  parameter_type_list  ')' ")
		(1, " direct_abstract_declarator ", "", 1, " '('  ')' ")
		(1, " direct_abstract_declarator ", "", 1, " direct_abstract_declarator  '['  constant_expression  ']' ")
		(1, " direct_abstract_declarator ", "", 1, " direct_abstract_declarator  '['  ']' ")
		(1, " direct_abstract_declarator ", "", 1, " '['  constant_expression  ']' ")
		(1, " direct_abstract_declarator ", "", 1, " '['  ']' ")
		(1, " direct_abstract_declarator ", "", 1, " '('  abstract_declarator  ')' ")
		(1, " abstract_declarator ", "", 1, " pointer  direct_abstract_declarator ")
		(1, " abstract_declarator ", "", 1, " direct_abstract_declarator ")
		(1, " abstract_declarator ", "", 1, " pointer ")
		(1, " type_name ", "", 1, " specifier_qualifier_list  abstract_declarator ")
		(1, " type_name ", "", 1, " specifier_qualifier_list ")
		(1, " identifier_list ", "", 1, " identifier_list  ','  'I' ")
		(1, " identifier_list ", "", 1, " 'I' ")
		(1, " parameter_declaration ", "", 1, " declaration_specifiers ")
		(1, " iteration_statement ", "", 1, " 'for'  '('  expression_statement  expression_statement  ')'  statement ")
		(1, " iteration_statement ", "", 1, " 'for'  '('  expression_statement  expression_statement  expression  ')'  statement ")
		(1, " jump_statement ", "", 1, " 'goto'  'I'  ';' ")
		(1, " jump_statement ", "", 1, " 'continue'  ';' ")
		(1, " jump_statement ", "", 1, " 'break'  ';' ")
		(1, " jump_statement ", "", 1, " 'return'  ';' ")
		(1, " jump_statement ", "", 1, " 'return'  expression  ';' ")
		(1, " translation_unit ", "", 1, " external_declaration ")
		(1, " translation_unit ", "", 1, " translation_unit  external_declaration ")
		(1, " external_declaration ", "", 1, " function_definition ")
		(1, " external_declaration ", "", 1, " declaration ")
		(1, " function_definition ", "", 1, " declaration_specifiers  declarator  declaration_list  compound_statement ")
		(1, " function_definition ", "", 1, " declaration_specifiers  declarator  compound_statement ")
		(1, " function_definition ", "", 1, " declarator  declaration_list  compound_statement ")
		(1, " function_definition ", "", 1, " declarator  compound_statement ")
		(1, " 'auto' ", "'auto'", 1, "")
		(1, " 'break' ", "'break'", 1, "")
		(1, " 'case' ", "'case'", 1, "")
		(1, " 'char' ", "'char'", 1, "")
		(1, " 'const' ", "'const'", 1, "")
		(1, " 'continue' ", "'continue'", 1, "")
		(1, " 'default' ", "'default'", 1, "")
		(1, " 'do' ", "'do'", 1, "")
		(1, " 'double' ", "'double'", 1, "")
		(1, " 'else' ", "'else'", 1, "")
		(1, " 'enum' ", "'enum'", 1, "")
		(1, " 'extern' ", "'extern'", 1, "")
		(1, " 'float' ", "'float'", 1, "")
		(1, " 'for' ", "'for'", 1, "")
		(1, " 'goto' ", "'goto'", 1, "")
		(1, " 'if' ", "'if'", 1, "")
		(1, " 'int' ", "'int'", 1, "")
		(1, " 'long' ", "'long'", 1, "")
		(1, " 'register' ", "'register'", 1, "")
		(1, " 'return' ", "'return'", 1, "")
		(1, " 'short' ", "'short'", 1, "")
		(1, " 'signed' ", "'signed'", 1, "")
		(1, " 'sizeof' ", "'sizeof'", 1, "")
		(1, " 'static' ", "'static'", 1, "")
		(1, " 'struct' ", "'struct'", 1, "")
		(1, " 'switch' ", "'switch'", 1, "")
		(1, " 'typedef' ", "'typedef'", 1, "")
		(1, " 'union' ", "'union'", 1, "")
		(1, " 'unsigned' ", "'unsigned'", 1, "")
		(1, " 'void' ", "'void'", 1, "")
		(1, " 'volatile' ", "'volatile'", 1, "")
		(1, " 'while' ", "'while'", 1, "")
		(1, " '!' ", "'!'", 1, "")
		(1, " '!=' ", "'!='", 1, "")
		(1, " '%' ", "'%'", 1, "")
		(1, " '<<=' ", "'<<='", 1, "")
		(1, " '<=' ", "'<='", 1, "")
		(1, " '=' ", "'='", 1, "")
		(1, " '==' ", "'=='", 1, "")
		(1, " '>' ", "'>'", 1, "")
		(1, " '>=' ", "'>='", 1, "")
		(1, " '>>' ", "'>>'", 1, "")
		(1, " '>>=' ", "'>>='", 1, "")
		(1, " '?' ", "'?'", 1, "")
		(1, " 'C' ", "'C'", 1, "")
		(1, " 'I' ", "'I'", 1, "")
		(1, " 'T' ", "'T'", 1, "")
		(1, " '|' ", "'|'", 1, "")
		(1, " '|=' ", "'|='", 1, "")
		(1, " '||' ", "'||'", 1, "")
		(1, " '}' ", "'}'", 1, "")
		(1, " '{' ", "'{'", 1, "")
		(1, " '^=' ", "'^='", 1, "")
		(1, " '^' ", "'^'", 1, "")
		(1, " ']' ", "']'", 1, "")
		(1, " '\"\"' ", "'\"\"'", 1, "")
		(1, " '[' ", "'['", 1, "")
		(1, " '<<' ", "'<<'", 1, "")
		(1, " '<' ", "'<'", 1, "")
		(1, " ';' ", "';'", 1, "")
		(1, " ':' ", "':'", 1, "")
		(1, " '/=' ", "'/='", 1, "")
		(1, " '/' ", "'/'", 1, "")
		(1, " '...' ", "'...'", 1, "")
		(1, " '.' ", "'.'", 1, "")
		(1, " '->' ", "'->'", 1, "")
		(1, " '-=' ", "'-='", 1, "")
		(1, " '--' ", "'--'", 1, "")
		(1, " '-' ", "'-'", 1, "")
		(1, " ',' ", "','", 1, "")
		(1, " '+=' ", "'+='", 1, "")
		(1, " '++' ", "'++'", 1, "")
		(1, " '+' ", "'+'", 1, "")
		(1, " '*=' ", "'*='", 1, "")
		(1, " '*' ", "'*'", 1, "")
		(1, " ')' ", "')'", 1, "")
		(1, " '(' ", "'('", 1, "")
		(1, " '&=' ", "'&='", 1, "")
		(1, " '&' ", "'&'", 1, "")
		(1, " '&&' ", "'&&'", 1, "")
		(1, " '%=' ", "'%='", 1, "")
		(1, " type_specifier ", "", 1, " 'short' ")
		(1, " type_specifier ", "", 1, " 'char' ")
		(1, " type_specifier ", "", 1, " 'void' ")
		(1, " storage_class_specifier ", "", 1, " 'register' ")
		(1, " storage_class_specifier ", "", 1, " 'auto' ")
		(1, " storage_class_specifier ", "", 1, " 'static' ")
	},
	Z = "",
	q_0 = 0,
	F = { 2 }
}
